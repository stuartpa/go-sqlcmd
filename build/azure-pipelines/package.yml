# go-mssqltools release artifacts

trigger: 
  tags:
    include:
      - v0.*

pr: none

variables:
  CLI_VERSION: '20.3.8'
  CLI_VERSION_REVISION: '1'
  CLI_COMMAND_EXCLUSION_LIST: 'go-mssqltools'
  CLI_PRE_INSTALLED_EXTENSION_LIST: ''
  GO_MSSQLTOOLS_PACKAGE_VERSION: '$(CLI_VERSION)'
  HOMEBREW_FORMULA_ARTIFACT: 'homebrew-formula'
  Build.SourcesCliDirectory: '$(Build.SourcesDirectory)/'
  GO_MSSQLTOOLS_PIPELINE_RUN_NUMBER: $(Build.BuildNumber)
  skip.upload: "true"

stages:
  - stage: Compile
    displayName: Compile sqlcmd on all 3 platforms
    jobs:
    - job: Compile_sqlcmd
      strategy:
        matrix:
          linux:
            imageName: 'ubuntu-latest'
          mac:
            imageName: 'macOS-latest'
          windows:
            imageName: 'windows-latest'
      pool:
        vmImage: $(imageName)
      steps:
        - template: build-common.yml

  - stage: CreatePackages
    displayName: Create packages to publish
    jobs:
    - job: Sign_and_pack
      pool:
        vmImage: 'windows-latest'
      steps:
      - task: PowerShell@2
        displayName: Set last tag to variable
        inputs:
          targetType: 'inline'
          script: |
            $VERSION_TAG = git describe --tags (git rev-list --tags --max-count=1)
            Write-Host("##vso[task.setvariable variable=VERSION_TAG]$VERSION_TAG")
            Write-Host($VERSION_TAG)

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          targetPath: '$(Pipeline.Workspace)'
      
      - task: EsrpCodeSigning@1
        displayName: Sign Windows binary
        inputs:
          ConnectedServiceName: 'Code Signing'
          FolderPath: '$(Pipeline.Workspace)\SqlcmdWindows_NT'
          Pattern: '*.exe'
          signConfigType: 'inlineSignParams'
          SessionTimeout: '600'
          MaxConcurrency: '5'
          MaxRetryAttempts: '5'
          inlineOperation: |
            [
              {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolSign",
                "parameters": [
                {
                  "parameterName": "OpusName",
                  "parameterValue": "go-sqlcmd"
                },
                {
                  "parameterName": "OpusInfo",
                  "parameterValue": "https://github.com/microsoft/go-sqlcmd"
                },
                {
                  "parameterName": "PageHash",
                  "parameterValue": "/NPH"
                },
                {
                  "parameterName": "FileDigest",
                  "parameterValue": "/fd sha256"
                },
                {
                  "parameterName": "TimeStamp",
                  "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                }
                ],
                "toolName": "signtool.exe",
                "toolVersion": "6.2.9304.0"
              },
              {
                "keyCode": "CP-230012",
                "operationSetCode": "SigntoolVerify",
                "parameters": [
                {
                  "parameterName": "VerifyAll",
                  "parameterValue": "/all"
                }
                    ],
                "toolName": "signtool.exe",
                "toolVersion": "6.2.9304.0"
              }
            ]
      - task: ArchiveFiles@2
        displayName: Zip Windows binary
        inputs:
          rootFolderOrFile: '$(Pipeline.Workspace)\SqlcmdWindows_NT\Sqlcmd.exe'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/sqlcmd-$(VERSION_TAG)-windows-x64.zip'

      - task: ArchiveFiles@2
        displayName: Tar Linux binary
        inputs:
          rootFolderOrFile: '$(Pipeline.Workspace)\SqlcmdLinux'
          includeRootFolder: false
          archiveType: 'tar'
          tarCompression: 'bz2'
          archiveFile: '$(Build.ArtifactStagingDirectory)/sqlcmd-$(VERSION_TAG)-linux-x64.tar.bz2'

      - task: ArchiveFiles@2
        displayName: Tar Darwin binary
        inputs:
          rootFolderOrFile: '$(Pipeline.Workspace)\SqlcmdDarwin'
          includeRootFolder: false
          archiveType: 'tar'
          tarCompression: 'bz2'
          archiveFile: '$(Build.ArtifactStagingDirectory)/sqlcmd-$(VERSION_TAG)-darwin-x64.tar.bz2'

      - task: PublishPipelineArtifact@1
        displayName: 'Publish release archives'
        inputs:
          targetPath: $(Build.ArtifactStagingDirectory)
          artifactName: SqlcmdRelease

  - stage: WindowsMSI
    jobs:
    - job: WindowsMSIDistribution
      displayName: 'Build Windows MSI distribution'
      condition: succeeded()
      pool:
        vmImage: 'vs2017-win2016'
      variables:
        wix_download_url: 'https://azdataartifacts.blob.core.windows.net/util/wix314-binaries-mirror.zip'
        MSI_OUTPUT_DIR: '$(Build.SourcesCliDirectory)/output/msi'
      steps:
      - task: VSBuild@1
        displayName: 'Build Windows MSI distribution'
        inputs:
          solution: '$(Build.SourcesCliDirectory)\release\windows\msi\mssql-tools.wixproj'
          msbuildArchitecture: 'x86'
          msbuildArgs: '/p:Configuration=Release'
      # Temporarily disable code signing to unblock GO-MSSQLTOOLS CLI build pipeline
      #  - task: EsrpCodeSigning@1
      #    inputs:
      #      ConnectedServiceName: 'Code Signing'
      #      FolderPath: '$(Build.SourcesDirectory)/projects/cli/output/msi'
      #      Pattern: '*.msi'
      #      signConfigType: 'inlineSignParams'
      #      inlineOperation: |
      #        [
      #          {
      #            "keyCode": "CP-230012",
      #            "operationSetCode": "SigntoolSign",
      #            "parameters": [
      #              {
      #                "parameterName": "OpusName",
      #                "parameterValue": "GO-MSSQLTOOLS CLI"
      #              },
      #              {
      #                "parameterName": "OpusInfo",
      #                "parameterValue": "https://sqlhelsinki.visualstudio.com/DefaultCollection/_git/aris"
      #              },
      #              {
      #                "parameterName": "PageHash",
      #                "parameterValue": "/NPH"
      #              },
      #              {
      #                "parameterName": "FileDigest",
      #                "parameterValue": "/fd sha256"
      #              },
      #              {
      #                "parameterName": "TimeStamp",
      #                "parameterValue": "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
      #              }
      #            ],
      #            "toolName": "signtool.exe",
      #            "toolVersion": "6.2.9304.0"
      #          },
      #          {
      #            "keyCode": "CP-230012",
      #            "operationSetCode": "SigntoolVerify",
      #            "parameters": [
      #              {
      #                "parameterName": "VerifyAll",
      #                "parameterValue": "/all"
      #              }
      #            ],
      #            "toolName": "signtool.exe",
      #            "toolVersion": "6.2.9304.0"
      #          }
      #        ]
      #      SessionTimeout: '600'
      #      MaxConcurrency: '50'
      #      MaxRetryAttempts: '20'
      - task: Bash@3
        displayName: 'Rename MSI'
        inputs:
          targetType: 'inline'
          script: |
            mv "${MSI_OUTPUT_DIR}/Azure Data CLI.msi" ${MSI_OUTPUT_DIR}/azdata-cli-${CLI_VERSION}.msi
      - task: CopyFiles@2
        displayName: 'Copy MSI to: $(Build.ArtifactStagingDirectory)/windows'
        inputs:
          sourceFolder: $(Build.SourcesCliDirectory)/output/msi
          contents: '?(*.msi|*.md)'
          TargetFolder: $(Build.ArtifactStagingDirectory)/windows
      - task: publishPipelineArtifact@0
        displayName: 'Publish MSI build artifacts'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)/windows
          ArtifactName: msi
    - job: TestWindowsMSIDistribution
      displayName: Test Windows MSI distribution
      dependsOn: WindowsMSIDistribution
      condition: succeeded()
      pool:
        vmImage: 'vs2017-win2016'
      steps:
      - task: DownloadPipelineArtifact@1
        displayName: 'Download msi artifact'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)/msi
          artifactName: msi
      - task: PowerShell@2
        displayName: Install and Load CLI
        inputs:
          targetType: 'filePath'
          filePath: '$(Build.SourcesDirectory)\projects\cli\release\windows\scripts\pipeline-test.ps1'
          failOnStderr: true

  - stage: DebianBuster
    jobs:
    - job: DebianBusterDistribution
      displayName: 'Build Debian Buster distribution'
      condition: succeeded()
      pool:
        vmImage: 'ubuntu-20.04'
      steps:
      - task: CmdLine@2
        displayName: 'Build Debian Buster distribution'
        inputs:
          script: release/debian/pipeline.sh
          workingDirectory: $(Build.SourcesCliDirectory)
        env:
          DISTRO: buster
          DISTRO_BASE_IMAGE: debian:buster
          BUILD_STAGINGDIRECTORY: $(Build.ArtifactStagingDirectory)
    # Temporarily disable code signing to unblock GO-MSSQLTOOLS CLI build pipeline
    #  - task: EsrpCodeSigning@1
    #    inputs:
    #      ConnectedServiceName: 'Code Signing'
    #      FolderPath: $(Build.ArtifactStagingDirectory)
    #      Pattern: '*.deb'
    #      signConfigType: 'inlineSignParams'
    #      inlineOperation: |
    #        [
    #          {
    #            "KeyCode" : "CP-450779-Pgp",
    #            "OperationCode" : "LinuxSign",
    #            "Parameters" : {},
    #            "ToolName" : "sign",
    #            "ToolVersion" : "1.0"
    #          }
    #        ]
    #      SessionTimeout: '600'
    #      MaxConcurrency: '50'
    #      MaxRetryAttempts: '20'
      #- task: CodeSignValidationInjected@1
      #  inputs:
      #    Targets: '.deb'
      - task: PublishPipelineArtifact@0
        displayName: 'Publish Artifact: debian-buster'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)
          ArtifactName: debian-buster

  - stage: DebianStretch
    jobs:
    - job: DebianStretchDistribution
      displayName: 'Build Debian Stretch distribution'
      pool:
        vmImage: 'ubuntu-20.04'
      steps:
      - task: CmdLine@2
        displayName: 'Build Debian Stretch distribution'
        inputs:
          script: release/debian/pipeline.sh
          workingDirectory: $(Build.SourcesCliDirectory)
        env:
          DISTRO: stretch
          DISTRO_BASE_IMAGE: debian:stretch
          BUILD_STAGINGDIRECTORY: $(Build.ArtifactStagingDirectory)
    # Temporarily disable code signing to unblock GO-MSSQLTOOLS CLI build pipeline
    #  - task: EsrpCodeSigning@1
    #    inputs:
    #      ConnectedServiceName: 'Code Signing'
    #      FolderPath: $(Build.ArtifactStagingDirectory)
    #      Pattern: '*.deb'
    #      signConfigType: 'inlineSignParams'
    #      inlineOperation: |
    #        [
    #          {
    #            "KeyCode" : "CP-450779-Pgp",
    #            "OperationCode" : "LinuxSign",
    #            "Parameters" : {},
    #            "ToolName" : "sign",
    #            "ToolVersion" : "1.0"
    #          }
    #        ]
    #      SessionTimeout: '600'
    #      MaxConcurrency: '50'
    #      MaxRetryAttempts: '20'
      #- task: CodeSignValidationInjected@1
      #  inputs:
      #    Targets: '.deb'
      - task: PublishPipelineArtifact@0
        displayName: 'Publish Artifact: debian-stretch'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)
          ArtifactName: debian-stretch

  - stage: DebianJessie
    jobs:
    - job: DebianJessiehDistribution
      displayName: 'Build Debian Jessie distribution'
      condition: succeeded()
      pool:
        vmImage: 'ubuntu-20.04'
      steps:
      - task: CmdLine@2
        displayName: 'Build Debian Jessie distribution'
        inputs:
          script: release/debian/pipeline.sh
          workingDirectory: $(Build.SourcesCliDirectory)
        env:
          DISTRO: jessie
          DISTRO_BASE_IMAGE: debian:jessie
          BUILD_STAGINGDIRECTORY: $(Build.ArtifactStagingDirectory)
    # Temporarily disable code signing to unblock GO-MSSQLTOOLS CLI build pipeline
    #  - task: EsrpCodeSigning@1
    #    inputs:
    #      ConnectedServiceName: 'Code Signing'
    #      FolderPath: $(Build.ArtifactStagingDirectory)
    #      Pattern: '*.deb'
    #      signConfigType: 'inlineSignParams'
    #      inlineOperation: |
    #        [
    #          {
    #            "KeyCode" : "CP-450779-Pgp",
    #            "OperationCode" : "LinuxSign",
    #            "Parameters" : {},
    #            "ToolName" : "sign",
    #            "ToolVersion" : "1.0"
    #          }
    #        ]
    #      SessionTimeout: '600'
    #      MaxConcurrency: '50'
    #      MaxRetryAttempts: '20'
      #- task: CodeSignValidationInjected@1
      #  inputs:
      #    Targets: '.deb'
      - task: PublishPipelineArtifact@0
        displayName: 'Publish Artifact: debian-jessie'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)
          ArtifactName: debian-jessie

  - stage: UbuntuBonic
    jobs:
    - job: UbuntuBonicDistribution
      displayName: 'Build Ubuntu Bionic distribution'
      condition: succeeded()
      pool:
        vmImage: 'ubuntu-20.04'
      steps:
      - task: CmdLine@2
        displayName: 'Build Ubuntu Bionic distribution'
        inputs:
          script: release/debian/pipeline.sh
          workingDirectory: $(Build.SourcesCliDirectory)
        env:
          DISTRO: bionic
          DISTRO_BASE_IMAGE: ubuntu:bionic
          BUILD_STAGINGDIRECTORY: $(Build.ArtifactStagingDirectory)
    # Temporarily disable code signing to unblock GO-MSSQLTOOLS CLI build pipeline
    #  - task: EsrpCodeSigning@1
    #    inputs:
    #      ConnectedServiceName: 'Code Signing'
    #      FolderPath: $(Build.ArtifactStagingDirectory)
    #      Pattern: '*.deb'
    #      signConfigType: 'inlineSignParams'
    #      inlineOperation: |
    #        [
    #          {
    #            "KeyCode" : "CP-450779-Pgp",
    #            "OperationCode" : "LinuxSign",
    #            "Parameters" : {},
    #            "ToolName" : "sign",
    #            "ToolVersion" : "1.0"
    #          }
    #        ]
    #      SessionTimeout: '600'
    #      MaxConcurrency: '50'
    #      MaxRetryAttempts: '20'
      #- task: CodeSignValidationInjected@1
      #  inputs:
      #    Targets: '.deb'
      - task: PublishPipelineArtifact@0
        displayName: 'Publish Artifact: ubuntu-bionic'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)
          ArtifactName: ubuntu-bionic

  - stage: UbuntuXenail
    jobs:
    - job: UbuntuXenialDistribution
      displayName: 'Build Ubuntu Xenial distribution'
      condition: succeeded()
      pool:
        vmImage: 'ubuntu-20.04'
      steps:
      - task: CmdLine@2
        displayName: 'Build Ubuntu Xenial distribution'
        inputs:
          script: release/debian/pipeline.sh
          workingDirectory: $(Build.SourcesCliDirectory)
        env:
          DISTRO: xenial
          DISTRO_BASE_IMAGE: ubuntu:xenial
          BUILD_STAGINGDIRECTORY: $(Build.ArtifactStagingDirectory)
    # Temporarily disable code signing to unblock GO-MSSQLTOOLS CLI build pipeline
    #  - task: EsrpCodeSigning@1
    #    inputs:
    #      ConnectedServiceName: 'Code Signing'
    #      FolderPath: $(Build.ArtifactStagingDirectory)
    #      Pattern: '*.deb'
    #      signConfigType: 'inlineSignParams'
    #      inlineOperation: |
    #        [
    #          {
    #            "KeyCode" : "CP-450779-Pgp",
    #            "OperationCode" : "LinuxSign",
    #            "Parameters" : {},
    #            "ToolName" : "sign",
    #            "ToolVersion" : "1.0"
    #          }
    #        ]
    #      SessionTimeout: '600'
    #      MaxConcurrency: '50'
    #      MaxRetryAttempts: '20'
      #- task: CodeSignValidationInjected@1
      #  inputs:
      #    Targets: '.deb'
      - task: PublishPipelineArtifact@0
        displayName: 'Publish Artifact: ubuntu-xenial'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)
          ArtifactName: ubuntu-xenial
    
  - stage: UbuntuFocalFossa
    jobs:
    - job: UbuntuFocalFossaDistribution
      displayName: 'Build Ubuntu Focal Fossa distribution'
      condition: succeeded()
      pool:
        vmImage: 'ubuntu-20.04'
      steps:
      - task: CmdLine@2
        displayName: 'Build Ubuntu Focal Fossa distribution'
        inputs:
          script: release/debian/pipeline.sh
          workingDirectory: $(Build.SourcesCliDirectory)
        env:
          DISTRO: focal
          DISTRO_BASE_IMAGE: ubuntu:focal
          BUILD_STAGINGDIRECTORY: $(Build.ArtifactStagingDirectory)
    # Temporarily disable code signing to unblock GO-MSSQLTOOLS CLI build pipeline
    #  - task: EsrpCodeSigning@1
    #    inputs:
    #      ConnectedServiceName: 'Code Signing'
    #      FolderPath: $(Build.ArtifactStagingDirectory)
    #      Pattern: '*.deb'
    #      signConfigType: 'inlineSignParams'
    #      inlineOperation: |
    #        [
    #          {
    #            "KeyCode" : "CP-450779-Pgp",
    #            "OperationCode" : "LinuxSign",
    #            "Parameters" : {},
    #            "ToolName" : "sign",
    #            "ToolVersion" : "1.0"
    #          }
    #        ]
    #      SessionTimeout: '600'
    #      MaxConcurrency: '50'
    #      MaxRetryAttempts: '20'
      #- task: CodeSignValidationInjected@1
      #  inputs:
      #    Targets: '.deb'
      - task: PublishPipelineArtifact@0
        displayName: 'Publish Artifact: ubuntu-focal'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)
          ArtifactName: ubuntu-focal
      - task: UniversalPackages@0
        displayName: "Publish Artifact ubuntu-focal to universal packages"
        inputs:
          #conditions: and(succeeded(), eq(skip.upload, 'false'))
          command: 'publish'
          publishDirectory: $(Build.ArtifactStagingDirectory)
          feedsToUsePublish: 'internal'
          vstsFeedPublish: 'aris'
          vstsFeedPackagePublish: 'go-mssqltools'
          versionOption: custom
          versionPublish: '0.0.$(Build.BuildId)'

  - stage: TestLinuxDebianDistributions
    dependsOn:
      - DebianBusterDistribution
      - DebianStretchDistribution
      - DebianJessiehDistribution
      - UbuntuBonicDistribution
      - UbuntuXenialDistribution
      - UbuntuFocalFossaDistribution
    jobs:
    - job: TestLinuxDebianDistributions
      displayName: 'Test debian packages: apt'

      pool:
        vmImage: 'ubuntu-20.04'
      steps:
      - task: DownloadPipelineArtifact@1
        displayName: 'Download debian-buster artifact'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)/debian
          artifactName: debian-buster
      - task: DownloadPipelineArtifact@1
        displayName: 'Download debian-stretch artifact'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)/debian
          artifactName: debian-stretch
      - task: DownloadPipelineArtifact@1
        displayName: 'Download debian-jessie artifact'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)/debian
          artifactName: debian-jessie
      - task: DownloadPipelineArtifact@1
        displayName: 'Download ubuntu-bionic artifact'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)/debian
          artifactName: ubuntu-bionic
      - task: DownloadPipelineArtifact@1
        displayName: 'Download ubuntu-xenial artifact'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)/debian
          artifactName: ubuntu-xenial
      - task: DownloadPipelineArtifact@1
        displayName: 'Download ubuntu-focal artifact'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)/debian
          artifactName: ubuntu-focal
      - task: CmdLine@2
        displayName: 'Test Linux distributions via apt'
        inputs:
          script: release/debian/pipeline-test.sh
          workingDirectory: $(Build.SourcesCliDirectory)
        env:
          BUILD_STAGINGDIRECTORY: $(Build.ArtifactStagingDirectory)

  - stage: RpmDistribution
    jobs:
    - job: RpmDistribution
      displayName: 'Build RPM Distribution'
      condition: succeeded()
      pool:
        vmImage: 'ubuntu-20.04'
      steps:
      - task: CmdLine@2
        displayName: 'Build RPM distribution'
        inputs:
          script: release/rpm/pipeline.sh
          workingDirectory: $(Build.SourcesCliDirectory)
        env:
          BUILD_STAGINGDIRECTORY: $(Build.ArtifactStagingDirectory)
    # Temporarily disable code signing to unblock GO-MSSQLTOOLS CLI build pipeline
    #  - task: EsrpCodeSigning@1
    #    inputs:
    #      ConnectedServiceName: 'Code Signing'
    #      FolderPath: $(Build.ArtifactStagingDirectory)
    #      Pattern: '*.rpm'
    #      signConfigType: 'inlineSignParams'
    #      inlineOperation: |
    #        [
    #          {
    #            "KeyCode" : "CP-450779-Pgp",
    #            "OperationCode" : "LinuxSign",
    #            "Parameters" : {},
    #            "ToolName" : "sign",
    #            "ToolVersion" : "1.0"
    #          }
    #        ]
    #      SessionTimeout: '600'
    #      MaxConcurrency: '50'
    #      MaxRetryAttempts: '20'
      #- task: CodeSignValidationInjected@1
      #  inputs:
      #    Targets: '.rpm'
      - task: PublishPipelineArtifact@0
        displayName: 'Publish Artifact: rpm'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)
          ArtifactName: rpm
    - job: TestLinuxRpmDistributions
      displayName:  'Test rpm packages: yum|zypper'
      dependsOn: RpmDistribution
      condition: succeeded()
      pool:
        vmImage: 'ubuntu-20.04'
      steps:
      - task: DownloadPipelineArtifact@1
        displayName: 'Download rpm artifact'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)/rpm
          artifactName: rpm
    # Temporarily disable the test to unblock GO-MSSQLTOOLS CLI build pipeline
    #  - task: CmdLine@2
    #    displayName: 'Test Linux distributions via yum|zypper'
    #    inputs:
    #      script: release/rpm/pipeline-test.sh
    #      workingDirectory: $(Build.SourcesCliDirectory)
    #    env:
    #      BUILD_STAGINGDIRECTORY: $(Build.ArtifactStagingDirectory)

  - stage: DockerDistribution
    jobs:   
    - job: DockerDistribution
      displayName: 'Build Docker image distribution'
      condition: succeeded()
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: Bash@3
        displayName: 'Build Docker image distribution'
        inputs:
          targetType: 'inline'
          script: release/docker/pipeline.sh
          workingDirectory: $(Build.SourcesCliDirectory)
          failOnStderr: false
        env:
          BUILD_STAGINGDIRECTORY: $(Build.ArtifactStagingDirectory)
      - task: PublishBuildArtifacts@1
        displayName: 'Publish docker build artifacts'
        inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)
          artifactName: docker

  - stage: HomebrewDistribution
    jobs:
    - job: HomebrewFormulaDistribution
      displayName: 'Build Homebrew formula distribution'
      condition: succeeded()
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        mssql_cli_src_url: 'https://github.com/microsoft/homebrew-azdata-cli-release/releases/download/15.0.2070/mssql-cli-1.0.0.tar.gz'
      steps:
      - task: CmdLine@2
        displayName: 'Build Homebrew formula distribution'
        inputs:
          script: release/homebrew/pipeline-formula.sh
          workingDirectory: $(Build.SourcesCliDirectory)
      - task: CopyFiles@2
        displayName: 'Copy homebrew artifacts to: $(Build.ArtifactStagingDirectory)/homebrew'
        inputs:
          sourceFolder: '$(Build.SourcesCliDirectory)/output/homebrew'
          contents: '?(*.rb|*.gz|*.sh)'
          TargetFolder: $(Build.ArtifactStagingDirectory)
      - task: PublishPipelineArtifact@0
        displayName: 'Publish Homebrew artifacts'
        inputs:
          TargetPath: $(Build.ArtifactStagingDirectory)
          ArtifactName: $(HOMEBREW_FORMULA_ARTIFACT)
